generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data.db"
}

model migrations {
  file    String @id
  applied Int

  @@map("_migrations")
}

model assignments {
  id                   Int                    @id @default(autoincrement())
  title                String
  assignment_questions assignment_questions[]
  user_assignments     user_assignments[]
}

model codedocs {
  code          String @default("")
  created       String @default("strftime('%Y-%m-%d %H:%M:%fZ')")
  filename      String @default("")
  id            String @id @default("'r'||lower(hex(randomblob(7)))")
  updated       String @default("strftime('%Y-%m-%d %H:%M:%fZ')")
  userid        String @default("")
  problem       String @default("")
  user          String @default("")
  assignment_id Int?
}

model events {
  created    String @default("strftime('%Y-%m-%d %H:%M:%fZ')")
  eventtype  String @default("")
  id         String @id @default("'r'||lower(hex(randomblob(7)))")
  updated    String @default("strftime('%Y-%m-%d %H:%M:%fZ')")
  userid     String @default("")
  whichevent String @default("")
}

model users {
  id                     String  @id @default("'r'||lower(hex(randomblob(7)))")
  name                   String?
  email                  String?
  passwordHash           String?
  username               String?
  isAdmin                Boolean @default(false)
  user_assignments       user_assignments[]
}

model questions {
  id                   Int                    @id @default(autoincrement())
  title                String
  description          String
  points               Int
  assignment_questions assignment_questions[]
}

model assignment_questions {
  id            Int         @id @default(autoincrement())
  question_id   Int
  assignment_id Int
  assignments   assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  questions     questions   @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_assignments {
  id            Int         @id @default(autoincrement())
  user_id       String
  assignment_id Int
  submitted     Int?
  assignments   assignments @relation(fields: [assignment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users_old {
  avatar                 String             @default("")
  created                String             @default("strftime('%Y-%m-%d %H:%M:%fZ')")
  email                  String             @default("")
  emailVisibility        Boolean            @default(false)
  id                     String             @id @default("'r'||lower(hex(randomblob(7)))")
  lastResetSentAt        String             @default("")
  lastVerificationSentAt String             @default("")
  name                   String             @default("")
  passwordHash           String
  tokenKey               String             @unique(map: "__pb_users_auth__tokenKey_idx")
  updated                String             @default("strftime('%Y-%m-%d %H:%M:%fZ')")
  username               String             @unique(map: "__pb_users_auth__username_idx")
  verified               Boolean            @default(false)
  isAdmin                Boolean            @default(false)
  // user_assignments       user_assignments[]
}
